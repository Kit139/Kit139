<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python爬虫入门首选，Requests+正则/Xpath</title>
      <link href="2021/01/10/Python%E5%85%A5%E9%97%A8%E9%A6%96%E9%80%89%EF%BC%8CRequests%20%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>2021/01/10/Python%E5%85%A5%E9%97%A8%E9%A6%96%E9%80%89%EF%BC%8CRequests%20%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Python爬虫入门首选，Requests-正则-Xpath"><a href="#Python爬虫入门首选，Requests-正则-Xpath" class="headerlink" title="Python爬虫入门首选，Requests+正则/Xpath"></a>Python爬虫入门首选，Requests+正则/Xpath</h1><p>学习完Python基本知识，我们就可以正式步入Python 爬虫的大门。</p><p>学习爬虫，最基础的便是模拟浏览器向服务器发出请求，那么我们需要从什么地方做起呢？请求需要我们自己来构造吗？需要关心请求这个数据结构的实现吗？需要了解 HTTP、TCP、IP 层的网络传输通信吗？需要知道服务器的响应和应答原理吗？</p><p>可能你无从下手，不过不用担心，Python 的强大之处就是提供了功能齐全的类库来帮助我们完成这些请求。利用 Python 现有的库我们可以非常方便地实现网络请求的模拟，常见的库有 urllib、requests 等。</p><p>拿 requests 这个库来说，有了它，我们只需要关心请求的链接是什么，需要传的参数是什么，以及如何设置可选的参数就好了，不用深入到底层去了解它到底是怎样传输和通信的。有了它，两行代码就可以完成一个请求和响应的处理过程，非常方便地得到网页内容。</p><p>接下来，就让我们用 Python 的 requests 库开始我们的爬虫之旅吧。</p><p><a href="https://requests.readthedocs.io/en/master/">Requests官方文档</a>   <a href="https://requests.readthedocs.io/zh_CN/latest/">中文文档</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先，requests 库是 Python 的一个第三方库，不是自带的。所以我们需要额外安装（<strong>Anaconda自带丰富库，可跳过此步</strong>）。</p><p>在这之前需要你先安装好 Python3 环境，如 Python 3.8 版本。</p><p>安装好 Python3 之后，我们使用 pip3 即可轻松地安装好 requests 库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure><p>由于科学上网的原因，国外的第三方库官方下载龟速，请pip换源建议清华镜像。</p><p>安装完成之后，我们就可以开始我们的网络爬虫之旅了。</p><h3 id="实例引入"><a href="#实例引入" class="headerlink" title="实例引入"></a>实例引入</h3><p>用 Python 写爬虫的第一步就是模拟发起一个请求，把网页的源代码获取下来。</p><p>当我们在浏览器中输入一个 URL 并回车，实际上就是让浏览器帮我们发起一个 GET 类型的 HTTP 请求，浏览器得到源代码后，把它渲染出来就可以看到网页内容了。</p><p>那如果我们想用 requests 来获取源代码，应该怎么办呢？很简单，requests 这个库提供了一个 get 方法，我们调用这个方法，并传入对应的 URL 就能得到网页的源代码。</p><p>比如这里有一个示例网站：<a href="https://zhangkaiheng.gitee.io/%EF%BC%8C%E5%85%B6%E5%86%85%E5%AE%B9%E5%A6%82%E4%B8%8B%EF%BC%9A">https://zhangkaiheng.gitee.io/，其内容如下：</a></p><p><img src="https://cdn.jsdelivr.net/gh/CIT-K/pictures/picture/20210102221113.png"></p><p>哈哈哈哈哈哈！竟然到了爬自己博客的地步！！！</p><p>第一步当然就是获取它的网页源代码了。</p><p>我们可以用 requests 这个库轻松地完成这个过程，代码的写法是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import requests  </span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;zhangkaiheng.gitee.io&#x2F;&#39;)  </span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot; data-theme&#x3D;&quot;light&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;title&gt;爱爬虫与大数据&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;keywords&quot; content&#x3D;&quot;爱爬虫与大数据&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;author&quot; content&#x3D;&quot;Kit&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;copyright&quot; content&#x3D;&quot;Kit&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;sidebar&quot;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;menu-mask&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;sidebar-menus&quot;&gt;</span><br><span class="line">...  </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>由于网页内容比较多，这里省略了大部分内容。</p><p>不过看运行结果，我们已经成功获取网页的 HTML 源代码，里面包含了电影的标题、类型、上映时间，等等。把网页源代码获取下来之后，下一步我们把想要的数据提取出来，数据的爬取就完成了。</p><p>这个实例的目的是让你体会一下 requests 这个库能帮我们实现什么功能。我们仅仅用 requests 的 get 方法就成功发起了一个 GET 请求，把网页源代码获取下来了，是不是很方便呢？</p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>HTTP 中最常见的请求之一就是 GET 请求，下面我们来详细了解利用 requests 库构建 GET 请求的方法。</p><h4 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h4><p>我们换一个示例网站，其 URL 为 <a href="http://httpbin.org/get%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E8%B5%B7%E7%9A%84%E6%98%AF">http://httpbin.org/get，如果客户端发起的是</a> GET 请求的话，该网站会判断并返回相应的请求信息，包括 Headers、IP 等。</p><p>我们还是用相同的方法来发起一个 GET 请求，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import requests  </span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)  </span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.24.0&quot;,</span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5ff98684-119fbcba4197a62114bac501&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;origin&quot;: &quot;112.32.241.87&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，我们成功发起了 GET 请求，也通过这个网站的返回结果得到了请求所携带的信息，包括 Headers、URL、IP，等等。</p><p>对于 GET 请求，我们知道 URL 后面是可以跟上一些参数的，如果我们现在想添加两个参数，其中 name 是 kit，age 是 25，URL 就可以写成如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;httpbin.org&#x2F;get?name&#x3D;kit&amp;age&#x3D;19</span><br></pre></td></tr></table></figure><p>要构造这个请求链接，是不是要直接写成这样呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get?name&#x3D;kit&amp;age&#x3D;19&#39;)</span><br></pre></td></tr></table></figure><p>这样也可以，但如果这些参数还需要我们手动拼接，未免有点不人性化。</p><p>一般情况下，这种信息我们利用 params 这个参数就可以直接传递了，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests  </span><br><span class="line"></span><br><span class="line">data &#x3D; &#123;  </span><br><span class="line">    &#39;name&#39;: &#39;kit&#39;,  </span><br><span class="line">    &#39;age&#39;: 19</span><br><span class="line">&#125; </span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;, params&#x3D;data)  </span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &quot;19&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;kit&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;, </span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.24.0&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5ff99fab-4dc3d0207d4376fd6923f0c4&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;origin&quot;: &quot;112.32.241.87&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get?name&#x3D;kit&amp;age&#x3D;19&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们把 URL 参数通过字典的形式传给 get 方法的 params 参数，通过返回信息我们可以判断，请求的链接自动被构造成了：<a href="http://httpbin.org/get?name=kit&amp;age=19%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%88%91%E4%BB%AC%E5%B0%B1%E4%B8%8D%E7%94%A8%E5%86%8D%E5%8E%BB%E8%87%AA%E5%B7%B1%E6%9E%84%E9%80%A0">http://httpbin.org/get?name=kit&amp;age=19，这样我们就不用再去自己构造</a> URL 了，非常方便。</p><p>另外，网页的返回类型实际上是 str 类型，但是它很特殊，是 JSON 格式的。所以，如果想直接解析返回结果，得到一个 JSON 格式的数据的话，可以直接调用 json 方法。</p><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import requests  </span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)  </span><br><span class="line">print(type(r.text))  </span><br><span class="line">print(r.json())  </span><br><span class="line">print(type(r.json()))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;str&#39;&gt;</span><br><span class="line">&#123;&#39;args&#39;: &#123;&#125;, &#39;headers&#39;: &#123;&#39;Accept&#39;: &#39;*&#x2F;*&#39;, &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;, &#39;Host&#39;: &#39;httpbin.org&#39;, &#39;User-Agent&#39;: &#39;python-requests&#x2F;2.24.0&#39;, &#39;X-Amzn-Trace-Id&#39;: </span><br><span class="line">&#39;Root&#x3D;1-5ff987e4-1248c4cd04158eed34ca44c5&#39;&#125;, &#39;origin&#39;: &#39;112.32.241.87&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;&#125;</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br></pre></td></tr></table></figure><p>可以发现，调用 json 方法，就可以将返回结果是 JSON 格式的字符串转化为字典。</p><p>但需要注意的是，如果返回结果不是 JSON 格式，便会出现解析错误，抛出 json.decoder.JSONDecodeError 异常。</p><h4 id="解析网页"><a href="#解析网页" class="headerlink" title="解析网页"></a>解析网页</h4><p>上面的请求链接返回的是 JSON 形式的字符串，那么如果请求普通的网页，则肯定能获得相应的内容了。下面以本课时最初的实例页面为例，我们再加上一点提取信息的逻辑，将代码完善成如下的样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;maoyan.com&#x2F;board&#x2F;4?offset&#x3D;0&#39;)</span><br><span class="line">pattern &#x3D; re.compile(&#39;&lt;p class&#x3D;&quot;name&quot;&gt;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;.*?&gt;(.*?)&lt;&#x2F;a&gt;&#39;, re.S)</span><br><span class="line">titles &#x3D; re.findall(pattern, r.text)</span><br><span class="line">print(titles)</span><br></pre></td></tr></table></figure><p>在这个例子中我们用到了最基础的正则表达式来匹配出所有的标题。关于正则表达式的相关内容，我们会在下一课时详细介绍，这里作为实例来配合讲解。</p><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#39;我不是药神&#39;, &#39;肖申克的救赎&#39;, &#39;绿皮书&#39;, &#39;海上钢琴师&#39;, &#39;哪吒之魔童降世&#39;, &#39;小偷家族&#39;, &#39;霸王别姬&#39;, &#39;美丽人生&#39;, &#39;盗梦空间&#39;, &#39;这个杀手不太冷&#39;]</span><br></pre></td></tr></table></figure><p>我们发现，这里成功提取出了所有的电影标题。一个最基本的抓取和提取流程就完成了。</p><h4 id="添加-headers"><a href="#添加-headers" class="headerlink" title="添加 headers"></a>添加 headers</h4><p>我们知道，在发起一个 HTTP 请求的时候，会有一个请求头 Request Headers，那么这个怎么来设置呢？</p><p>很简单，我们使用 headers 参数就可以完成了。</p><p>在刚才的实例中，实际上我们是没有设置 Request Headers 信息的，如果不设置，某些网站会发现这不是一个正常的浏览器发起的请求，网站可能会返回异常的结果，导致网页抓取失败。</p><p>要添加 Headers 信息，比如我们这里想添加一个 User-Agent 字段，我们可以这么来写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.7.36.5901 Safari&#x2F;537.36&#39;</span><br><span class="line">&#125;</span><br><span class="line">r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;zhangkaiheng.gitee.io&#x2F;&#39;, headers&#x3D;headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>当然，我们可以在 headers 这个参数中任意添加其他的字段信息。</p><h4 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h4><p>前面我们了解了最基本的 GET 请求，另外一种比较常见的请求方式是 POST。使用 requests 实现 POST 请求同样非常简单，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">data &#x3D; &#123;&#39;name&#39;: &#39;kit&#39;, &#39;age&#39;: &#39;20&#39;&#125;</span><br><span class="line">r &#x3D; requests.post(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;, data&#x3D;data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>这里还是请求 <a href="http://httpbin.org/post%EF%BC%8C%E8%AF%A5%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E5%88%A4%E6%96%AD%E5%A6%82%E6%9E%9C%E8%AF%B7%E6%B1%82%E6%98%AF">http://httpbin.org/post，该网站可以判断如果请求是</a> POST 方式，就把相关请求信息返回。</p><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;data&quot;: &quot;&quot;, </span><br><span class="line">  &quot;files&quot;: &#123;&#125;, </span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &quot;20&quot;, </span><br><span class="line">    &quot;name&quot;: &quot;kit&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*&#x2F;*&quot;, </span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span><br><span class="line">    &quot;Content-Length&quot;: &quot;15&quot;, </span><br><span class="line">    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;,         </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.24.0&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5ff99ef7-1d4426a80c49df9d31ff3250&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;json&quot;: null, </span><br><span class="line">  &quot;origin&quot;: &quot;112.32.241.87&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，我们成功获得了返回结果，其中 form 部分就是提交的数据，这就证明 POST 请求成功发送了。</p><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>发送请求后，得到的自然就是响应，即 Response。</p><p>在上面的实例中，我们使用 text 和 content 获取了响应的内容。此外，还有很多属性和方法可以用来获取其他信息，比如状态码、响应头、Cookies 等。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;zhangkaiheng.gitee.io&#x2F;&#39;)</span><br><span class="line">print(type(r.status_code), r.status_code)</span><br><span class="line">print(type(r.headers), r.headers)</span><br><span class="line">print(type(r.cookies), r.cookies)</span><br><span class="line">print(type(r.url), r.url)</span><br><span class="line">print(type(r.history), r.history)</span><br></pre></td></tr></table></figure><p>这里分别打印输出 status_code 属性得到状态码，输出 headers 属性得到响应头，输出 cookies 属性得到 Cookies，输出 url 属性得到 URL，输出 history 属性得到请求历史。</p><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;int&#39;&gt; 200</span><br><span class="line">&lt;class &#39;requests.structures.CaseInsensitiveDict&#39;&gt; &#123;&#39;Date&#39;: &#39;Sat, 09 Jan 2021 12:54:40 GMT&#39;, &#39;Content-Type&#39;: &#39;text&#x2F;html&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;, &#39;Connection&#39;: &#39;keep-alive&#39;, &#39;Server&#39;: &#39;openresty&#x2F;1.13.6.2&#39;, &#39;Last-Modified&#39;: &#39;Mon, 04 Jan 2021 07:53:48 GMT&#39;, &#39;ETag&#39;: &#39;W&#x2F;&quot;5ff2c98c-9df5&quot;&#39;, &#39;Expires&#39;: &#39;Sun, 10 Jan 2021 12:54:40 GMT&#39;, &#39;Cache-Control&#39;: &#39;max-age&#x3D;86400&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;&#125;</span><br><span class="line">&lt;class &#39;requests.cookies.RequestsCookieJar&#39;&gt; &lt;RequestsCookieJar[]&gt;</span><br><span class="line">&lt;class &#39;str&#39;&gt; https:&#x2F;&#x2F;zhangkaiheng.gitee.io&#x2F;</span><br><span class="line">&lt;class &#39;list&#39;&gt; []</span><br></pre></td></tr></table></figure><p>可以看到，headers 和 cookies 这两个属性得到的结果分别是 CaseInsensitiveDict 和 RequestsCookieJar 类型。</p><p>我们知道，<a href="https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin">状态码</a>是用来表示响应状态的，比如返回 200 代表我们得到的响应是没问题的，上面的例子正好输出的结果也是 200，所以我们可以通过判断 Response 的状态码来确认是否爬取成功。</p><p>requests 还提供了一个内置的状态码查询对象 requests.codes，用法示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;zhangkaiheng.gitee.io&#x2F;&#39;)</span><br><span class="line">exit() if not r.status_code &#x3D;&#x3D; requests.codes.ok else print(&#39;Request Successfully&#39;)</span><br></pre></td></tr></table></figure><p>这里通过比较返回码和内置的成功的返回码，来保证请求得到了正常响应，输出成功请求的消息，否则程序终止，这里我们用 requests.codes.ok 得到的是成功的状态码 200。</p><p>这样的话，我们就不用再在程序里面写状态码对应的数字了，用字符串表示状态码会显得更加直观。</p><h1 id="爬虫入门首选开刀网站——猫眼电影"><a href="#爬虫入门首选开刀网站——猫眼电影" class="headerlink" title="爬虫入门首选开刀网站——猫眼电影"></a>爬虫入门首选开刀网站——猫眼电影</h1><h2 id="爬虫准备"><a href="#爬虫准备" class="headerlink" title="爬虫准备"></a>爬虫准备</h2><p>猫眼电影是美团旗下的一家集媒体内容、在线购票、用户互动社交、电影衍生品销售等服务的一站式电影互联网平台。2015年6月，猫眼电影覆盖影院超过4000家，这些影院的票房贡献占比超过90%。目前，猫眼占网络购票70%的市场份额，每三张电影票就有一张出自猫眼电影，是影迷下载量较多、使用率较高的电影应用软件。同时，猫眼电影为合作影院和电影制片发行方提供覆盖海量电影消费者的精准营销方案，助力影片票房。</p><p><img src="https://cdn.jsdelivr.net/gh/CIT-K/pictures/picture/20210109211910.png"></p><p>运行平台：win10</p><p>Python版本：3.8</p><p>IDE：Pycharm</p><p>浏览器：Chrome</p><p>目标：获取猫眼Top100电影名称、主演、上映时间、评分、封面图片</p><p>如此网站数据看上去都心动，不过猫眼电影也是有反爬机制的，只不过今天我们的入门小打小闹触及不深。</p><h2 id="分析网页"><a href="#分析网页" class="headerlink" title="分析网页"></a>分析网页</h2><p><img src="https://cdn.jsdelivr.net/gh/CIT-K/pictures/picture/20210109214518.png"></p><p>通过F12或者右键选择检查我们发现两个规律：</p><ol><li>要获取的数据有规律的存在网页代码中：如标题在class属性为name的p标签里、主演在class属性为star的p标签里······</li><li>第一页链接offset=0而第二页链接offset=10推测第三页offset=20</li></ol><h2 id="请求网页"><a href="#请求网页" class="headerlink" title="请求网页"></a>请求网页</h2><p>分析完网页我们可以试着模拟浏览器请求网页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import requests  </span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;maoyan.com&#x2F;board&#x2F;4?offset&#x3D;0&#39;)  </span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>为了保证爬虫正常，添加请求头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">  &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.7.36.5901 Safari&#x2F;537.36&#39;</span><br><span class="line">&#125;</span><br><span class="line">r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;maoyan.com&#x2F;board&#x2F;4?offset&#x3D;0&#39;, headers&#x3D;headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>试着利用最简单的正则获取第一页的标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">  &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.7.36.5901 Safari&#x2F;537.36&#39;</span><br><span class="line">&#125;</span><br><span class="line">r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;maoyan.com&#x2F;board&#x2F;4?offset&#x3D;0&#39;, headers&#x3D;headers)</span><br><span class="line">pattern &#x3D; re.compile(&#39;&lt;p class&#x3D;&quot;name&quot;&gt;&lt;a href&#x3D;&quot;&#x2F;films&#x2F;.*?&gt;(.*?)&lt;&#x2F;a&gt;&#39;, re.S)</span><br><span class="line">titles &#x3D; re.findall(pattern, r.text)</span><br><span class="line">print(titles)</span><br><span class="line"># 运行结果</span><br><span class="line"># [&#39;我不是药神&#39;, &#39;肖申克的救赎&#39;, &#39;绿皮书&#39;, &#39;海上钢琴师&#39;, &#39;哪吒之魔童降世&#39;, &#39;小偷家族&#39;, &#39;霸王别姬&#39;, &#39;美丽人生&#39;, &#39;盗梦空间&#39;, &#39;这个杀手不太冷&#39;]</span><br></pre></td></tr></table></figure><p>针对规律一我们很容易利用正则解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 主演</span><br><span class="line">star &#x3D; re.findall(re.compile(&#39;&lt;p class&#x3D;&quot;star&quot;&gt;(.*?)&lt;&#x2F;p&gt;&#39;, re.S), r.text)</span><br><span class="line"># 发表时间</span><br><span class="line">releasetime &#x3D; re.findall(re.compile(&#39;&lt;p class&#x3D;&quot;releasetime&quot;&gt;(.*?)&lt;&#x2F;p&gt;&#39;, re.S), r.text)</span><br><span class="line"># 封面链接</span><br><span class="line">img_urls &#x3D; re.findall(re.compile(&#39;&lt;img data-src&#x3D;&quot;(.*?)&quot; alt&#x3D;&quot;.*?&quot; class&#x3D;&quot;board-img&quot; &#x2F;&gt;&#39;, re.S), r.text)</span><br><span class="line"># 排名</span><br><span class="line">top &#x3D; re.findall(re.compile(&#39;&lt;i class&#x3D;&quot;board-index board-index-.*?&quot;&gt;(.*?)&lt;&#x2F;i&gt;&#39;, re.S), r.text)</span><br></pre></td></tr></table></figure><p>不写了。。。看<a href="https://www.bilibili.com/video/BV1Kr4y1T7z8/">视频</a>听口述吧</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CIT </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210102寒假第一交流会——黑屏见翻车？不！我在检测认真质量</title>
      <link href="2021/01/02/20210102%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E4%BA%A4%E6%B5%81%E4%BC%9A%E2%80%94%E2%80%94%E9%BB%91%E5%B1%8F%E8%A7%81%E7%BF%BB%E8%BD%A6%EF%BC%9F%E4%B8%8D%EF%BC%81%E6%88%91%E5%9C%A8%E6%A3%80%E6%B5%8B%E8%AE%A4%E7%9C%9F%E8%B4%A8%E9%87%8F/"/>
      <url>2021/01/02/20210102%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E4%BA%A4%E6%B5%81%E4%BC%9A%E2%80%94%E2%80%94%E9%BB%91%E5%B1%8F%E8%A7%81%E7%BF%BB%E8%BD%A6%EF%BC%9F%E4%B8%8D%EF%BC%81%E6%88%91%E5%9C%A8%E6%A3%80%E6%B5%8B%E8%AE%A4%E7%9C%9F%E8%B4%A8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="20210102寒假第一交流会——黑屏见翻车？不！我在检测认真质量"><a href="#20210102寒假第一交流会——黑屏见翻车？不！我在检测认真质量" class="headerlink" title="20210102寒假第一交流会——黑屏见翻车？不！我在检测认真质量"></a>20210102寒假第一交流会——黑屏见翻车？不！我在检测认真质量</h1><h2 id="明晰定位，确立方向"><a href="#明晰定位，确立方向" class="headerlink" title="明晰定位，确立方向"></a>明晰定位，确立方向</h2><ul><li>Python——除了生孩子不可以其他啥都行不假但不适合任何人</li><li>编程——工管人、经济人躲不掉</li><li>编程触类旁通——学Python培养编程思维利VB</li></ul><h2 id="选课推荐"><a href="#选课推荐" class="headerlink" title="选课推荐"></a>选课推荐</h2><ul><li>数学建模</li></ul><p><img src="https://cdn.jsdelivr.net/gh/CIT-K/pictures/picture/20210102220412.png"></p><ul><li><p>Python程序设计</p></li><li><p>MS高级应用</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/CIT-K/pictures/picture/20210102220812.png"></p><h2 id="互动环节"><a href="#互动环节" class="headerlink" title="互动环节"></a>互动环节</h2><p>主修与辅修</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>利用好github、gitee</li></ul><p><img src="https://cdn.jsdelivr.net/gh/CIT-K/pictures/picture/20210102221419.png"></p><p><img src="https://cdn.jsdelivr.net/gh/CIT-K/pictures/picture/20210102221202.png"></p><p><img src="https://cdn.jsdelivr.net/gh/CIT-K/pictures/picture/20210102220935.png"></p><p><img src="https://cdn.jsdelivr.net/gh/CIT-K/pictures/picture/20210102221113.png"></p><ul><li><p>布置作业</p><p>一星期过一遍Python<a href="https://www.w3school.com.cn/python/index.asp">基础知识</a>和<a href="https://www.bilibili.com/video/BV1ta411w7D3">回放</a>等</p><p>查找资料预习爬虫(可以看看<a href="https://www.bilibili.com/video/BV1NE411Q7i2">解师哥的视频</a>注意有P2) </p><p>下周六个人学习总结分享 </p><p>B站、知乎、微信公众号等开源资源要利用好</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/01/hello-world/"/>
      <url>2021/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>给hexo Butterfly扩展图标</title>
      <link href="2020/12/28/%E7%BB%99hexo%20Butterfly%E6%89%A9%E5%B1%95%E5%9B%BE%E6%A0%87/"/>
      <url>2020/12/28/%E7%BB%99hexo%20Butterfly%E6%89%A9%E5%B1%95%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h1 id="给hexo-Butterfly扩展图标"><a href="#给hexo-Butterfly扩展图标" class="headerlink" title="给hexo Butterfly扩展图标"></a>给hexo Butterfly扩展图标</h1><p> 发表于 2020-05-20</p><p>由于hexo next主题采用了Font Awesome图标（不包含如B站，知乎这类中国大陆网站的图标）所以如果需要使用的话需要额外自行添加</p><h2 id="Font-Awesome相关知识"><a href="#Font-Awesome相关知识" class="headerlink" title="Font Awesome相关知识"></a><a href="http://www.fontawesome.com.cn/">Font Awesome</a>相关知识</h2><p>引用<a href="https://zh.wikipedia.org/wiki/Font_Awesome">维基百科</a>中的介绍</p><p>Font Awesome 是一个基于CSS和LESS的字体和图标工具套件。它由Dave Gandy制作，用于Twitter Bootstrap，后来被整合到BootstrapCDN 中。Font Awesome在使用第三方Font Scripts的网站中占有20％的市场份额，排在Google字型之后的第二位。</p><p>简单的说，Font Awesome是一个图标库，当你的博客需要使用一个图标时（比如）</p><p>由于next已经使用了Font Awesome，所以只需要插入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;fab fa-github&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><p>即可。具体的Font Awesome使用方法可以看<a href="https://www.runoob.com/font-awesome/fontawesome-tutorial.html">菜鸟教程</a></p><h2 id="第三方图标库的使用"><a href="#第三方图标库的使用" class="headerlink" title="第三方图标库的使用"></a>第三方图标库的使用</h2><p>由于Font Awesome图标不包含如B站，知乎这类中国大陆网站的图标，所以如果需要使用的话需要额外自行添加第三方的图标库，在这里，我们使用使用<a href="https://www.iconfont.cn/">阿里巴巴矢量库</a></p><h3 id="下载图标"><a href="#下载图标" class="headerlink" title="下载图标"></a>下载图标</h3><p>首先，我们在阿里巴巴图标库挑选需要的图标，具体可以使用搜索功能进行搜索，在图标上点击添加入库将其加入库中，之后点击右上方购物车图标，点击下载代码获得一个压缩文件</p><h3 id="使用下载的图标"><a href="#使用下载的图标" class="headerlink" title="使用下载的图标"></a>使用下载的图标</h3><p>打开文件中的<code>iconfont.css</code>，将其中的内容（比如这样）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;font-family: &quot;iconfont&quot;;</span><br><span class="line">    src: url(&#39;iconfont.eot?t&#x3D;1589906807175&#39;); &#x2F;* IE9 *&#x2F;</span><br><span class="line">    src: url(&#39;iconfont.eot?t&#x3D;1589906807175#iefix&#39;) format(&#39;embedded-opentype&#39;), &#x2F;* IE6-IE8 *&#x2F;</span><br><span class="line">    url(&#39;data:application&#x2F;x-font-woff2;charset&#x3D;utf-8;base64,d09GMgABAAAAAAiAAAsAAAAAD0AAAAgzAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCDNgqRPI4HATYCJAMYCw4ABCAFhG0HXxuyDCMR9oOSQpP9RYJ5yE75AyR1CmZsFOu9SJ3BIn3W9BPb&#x2F;Ad3h9hYq2CuK9yPrpD4rxP35f5dCEIazng0oUypUg1gxStcoQJ2sK5Mrk5aBxUGhfHrIJXedPa780X2JD+rwebUuibgQmWZsHTyyT3kZCsny23&#x2F;A+BgzdWJJ+8bcJj28nLIzRxTTeQlQiYkEW&#x2F;&#x2F;JGskqBAKIUYqObPoZoWJJy1mwQMT&#x2F;bqbAQVAxIILao1LyQEWBnZKDng01lcCWwjALQYK62aIEwuoNxDsNIo+CwATou+n&#x2F;uAVFoBGGsCBGXWxNRDxXKTXI6mXSgIJIF8xAKxPA0AAXABgQF1kaQ2ghFwih4jqjgUAYHEzGjwXP5&#x2F;9olSv1ypR&#x2F;qMUs0TqHx4ADUMIoAaAQ6KUKW0EPBdZfJEofYBPztkyHSDwojQNEPKcLPhoHoax2hcgWYaeAB4X&#x2F;qE8RAAXZ44yVIjdDS0kao0NQxQsVsVKoqptNiISVtb8uVguQCAwl0hEQmNDB04q7SKhpMVjzgG+L4pkoy9TpJqZ39hZBpc6ecvm3EXCXe3nSF0bQXsLdoZsr+0gsOxTD6rxV0d2N&#x2F;Z6zcbWiga7qssQ1XpQX5xzc6t7jtZoPiE0oDcqYtVpXdmjYQgV7z7icaUyITtaY9SU7FK9Zu3007LNqHJbYYMx2RvaKBVK8dpZPX5Zra&#x2F;vOVxVtzrXrFebWHEqfaPraM1IReuuwdQmASUh8zVWy&#x2F;djiKC1AARiCY&#x2F;XJHCgmUqHgS+gfDjFlkAixLAHIVnLS75d3A+f8bSUVyOobdMEE6IUAUs0pHOaDm&#x2F;ad0AM&#x2F;NupIkxx7cNo8sojtetmG5evk5q1OU3kORbOEpfdMQL4FGYLdsMA5UjQC++rNGSIwyGO+CgOZ1ApxEfmYzP+yA2kNXY1wPfHSpeI&#x2F;Jv4vWp8glc3&#x2F;J2qMGouX4ZYvZvFIoy2N0VEersaO6Fw0IxWFQEcRHYUkSC+9TvljkrXNly8fVrcf4Adgec9QLaL5uF3NYWqc+9IRLoK1pX+68qYQ2gcO3Eq0uRFlLhpzOSLo+gepfeLdzzBucnErmrINJq19bJO+GGoVBD4zxUshEniZutk&#x2F;diXkauhX19dy5GrYEVyNVtXj7v&#x2F;bpAEE1nv1XL4zcFCefWS2NhzxFP7NgF9b9x78rcV8vT+zRQatOXAGbE4b&#x2F;qgNWMqZUt3GtED19m2rthjigbtr1i2CmDgytGrKaplWXXuefb2HHBgwEaKt9TeseH4ezzY&#x2F;LRy3nHAqIhRUQPDIXz&#x2F;vzG0LdZ3RNLKIumJ+AWqN9KmFLfdXyC0bWPUZlggPOl26a2ZIIFJveRidCc8Uzrsg31Ps+Gd4i4Lqx5l6Mat7M5bR3tY2XpoC+p4z0tfJwvyDdJSC7lYWu56ZLPseGQB2z1ydmxQiYHHmyB+8Jfbmb65gVGZ9vYDD90xE7f5C&#x2F;LYXDrX6tiSK7Gik3KK97+km&#x2F;QzusBqKG9l35GhtDh38eHtadyI0g4mQZL0AeZ+1&#x2F;6YO8ZYazR3srFYhVVCBbEnCqEaq8XG2L+QxR5KARbIWKzBrCwRQFmBvfy7DlNymBNjsQIrGLUqxpufldDVe3ipWiBgMIqKJLeE1j6+Xn5+ym48vwfRhgwOxpbqDMywWJBV46jGtDWNTaREKrU5z2Ap42yNrRlxNcgI2cdE62x0MTFVNlXRMYacROPjs3e0xoSYcIQzJab+PWLssyOTil0NxwlkZEqQyoAYKBGJV8qVTiq5app5fGS8pxkRe8zqhn1It24aG&#x2F;&#x2F;Ra9zETiaus2ZGq4iWEDnBWszII4nUkXGUMdamuO6RvpbYxNsLjyjq5xkfqeXrvaQKcxmRKYlSTuTmz+RXTfHxJm5O7thnBv8vL98rv+6&#x2F;9&#x2F;uRw7yn9QSrDW0Y&#x2F;slj4Z1FeEMO49zVI4JLLU44Gkxpv76aRacguB&#x2F;3cKOvJgKfwZYjbeNdYuqKPFTZkqbEqDXCxaexoGSV0xHjKWY973SlpkYZZnZmLpmWkJxakaRJUlM34WHXbl5R5ps29uVzjI36aNOLTSschk108E2RVVmr+12qbCfdBJ+KvStsKwryS0J0aEYplYwfZkatjulAMzLpJDplum6CQaPackA+te5ylHUPsxAb&#x2F;5FTTkZu0c6L1G3T7o6Mr3nY1&#x2F;3Po77pP54gwqtp3bRpOloeYxnzMJNqaaEyFdYg68fa0qhOnggssrIfKmRSRQTgTig63shIZgqgWkSjRo00P3qWn8WfTU0ttKibVWuRZ1E7q87C6VJSmJrauuWHN04T3R1KjD9Pdge9qan3nf7cCGWucqS2Z9Dcox64V1TcUztS1oyAvgCH6He0wygYAAB9afNi8zG0G&#x2F;nq1t9oH62nyj&#x2F;I0FHaCQyP7Ffl8pBvrPh&#x2F;as3t1249dK1+RwEP77Jgb3SCsOcSfCqAIFOHmS3fK57JIeDLaeDmhPUAlUr3ucIavO0UliYDmoA5ICytFCtdgBDzAQYrHEScxZ8uptIJCFVCAHAyTACFswFoMgcA4ZyTYuU9IAy8AwYXBCJ5lOqCYgsc0rg5MSpBC&#x2F;oPKkO9M2HZxAPvWIRWcb4gsr6RfdUAWZyWO27YI3Mc4j9FLuLAMXVwFbfDtiUYmGo0EpciwzFJHHVobKgbbZwYlQQpLdB&#x2F;eStDvYstm8rX37EIreKWGY9538i+Wj&#x2F;IxNIe0puj7zXjrQz3nyInqtiBbWbqEtdVF2OLrQQGersajcTKEc3DUaJWcn0d8fKu7lt2+PpmBbFGprRUekZmi5OCVv3MeNvP&#x2F;8uqDHsJulKUWf8DRXt&#x2F;W9miyNT0OBoBAA&#x3D;&#x3D;&#39;) format(&#39;woff2&#39;),</span><br><span class="line">    url(&#39;iconfont.woff?t&#x3D;1589906807175&#39;) format(&#39;woff&#39;),</span><br><span class="line">    url(&#39;iconfont.ttf?t&#x3D;1589906807175&#39;) format(&#39;truetype&#39;), &#x2F;* chrome, firefox, opera, Safari, Android, iOS 4.2+ *&#x2F;</span><br><span class="line">    url(&#39;iconfont.svg?t&#x3D;1589906807175#iconfont&#39;) format(&#39;svg&#39;); &#x2F;* iOS 4.1- *&#x2F;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .iconfont &#123;</span><br><span class="line">    font-family: &quot;iconfont&quot; !important;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-style: normal;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .icon-douban:before &#123;</span><br><span class="line">    content: &quot;\f01c8&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .icon-csdn:before &#123;</span><br><span class="line">    content: &quot;\e60a&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .icon-zhihu:before &#123;</span><br><span class="line">    content: &quot;\e69a&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .icon-tubiaozhizuo-:before &#123;</span><br><span class="line">    content: &quot;\e60b&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .icon-bilibili-line:before &#123;</span><br><span class="line">    content: &quot;\e75d&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>全部复制到<code>\blogs\themes\next\source\lib\font-awesome\css\all.min.css</code>后边。这样，就可以使用新添加的图标了</p><p>：<code>&lt;i class=&quot;iconfont icon-bilibili-line&quot;&gt;&lt;/i&gt;</code></p><h3 id="在侧栏的社交链接中加入bilibili"><a href="#在侧栏的社交链接中加入bilibili" class="headerlink" title="在侧栏的社交链接中加入bilibili"></a>在侧栏的社交链接中加入bilibili</h3><p>打开<code>blog\themes\next\_config.yml</code>，搜索找到sidebar下的social：增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bilibili: https:&#x2F;&#x2F;space.bilibili.com&#x2F;B站id || iconfont icon-bilibili-line</span><br></pre></td></tr></table></figure><p>修改完如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  #GitHub: https:&#x2F;&#x2F;github.com&#x2F;yourname || fab fa-github</span><br><span class="line">  #E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span><br><span class="line">  #Weibo: https:&#x2F;&#x2F;weibo.com&#x2F;yourname || fab fa-weibo</span><br><span class="line">  #Google: https:&#x2F;&#x2F;plus.google.com&#x2F;yourname || fab fa-google</span><br><span class="line">  #Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;yourname || fab fa-twitter</span><br><span class="line">  #FB Page: https:&#x2F;&#x2F;www.facebook.com&#x2F;yourname || fab fa-facebook</span><br><span class="line">  #StackOverflow: https:&#x2F;&#x2F;stackoverflow.com&#x2F;yourname || fab fa-stack-overflow</span><br><span class="line">  #YouTube: https:&#x2F;&#x2F;youtube.com&#x2F;yourname || fab fa-youtube</span><br><span class="line">  #Instagram: https:&#x2F;&#x2F;instagram.com&#x2F;yourname || fab fa-instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br><span class="line">  bilibili: https:&#x2F;&#x2F;space.bilibili.com&#x2F;B站id || iconfont icon-bilibili-line</span><br></pre></td></tr></table></figure><p>把B站id换成你的B站id即可</p><p><a href="https://x-zeppelin.github.io/hexo-icon/">https://x-zeppelin.github.io/hexo-icon/</a></p><p>————-end————-</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>同济校友世纪互联白女票</title>
      <link href="2020/12/27/%E5%90%8C%E6%B5%8E%E6%A0%A1%E5%8F%8B%E4%B8%96%E7%BA%AA%E4%BA%92%E8%81%94%E7%99%BD%E5%A5%B3%E7%A5%A8/"/>
      <url>2020/12/27/%E5%90%8C%E6%B5%8E%E6%A0%A1%E5%8F%8B%E4%B8%96%E7%BA%AA%E4%BA%92%E8%81%94%E7%99%BD%E5%A5%B3%E7%A5%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="同济校友世纪互联白女票"><a href="#同济校友世纪互联白女票" class="headerlink" title="同济校友世纪互联白女票"></a><strong>同济校友世纪互联白女票</strong></h1><p>社工库免费查询：@sgk123bot  </p><p>身份户籍、手机机主、开房记录、快递地址、贷款记录、车牌车主、个人常用密码、QQ/邮箱/微博/网络账号、就职单位和银行开户等联系方式。  </p><p>【每日1次免费】 输入推广码: IVT51C7A00B 额外获得5次查询。   </p><p>学号姓名怎么获取已经知道了，tg某社工库机器人库比较全。</p><p>之所以选生僻字也是这一点，缩小范围，再根据学号可以基本确定sfz里的出生年份进一步确定姓名对应的sfz号。  <a href="https://mail-mgmt.tongji.edu.cn/regOfficialEmail/checkPhone">https://mail-mgmt.tongji.edu.cn/regOfficialEmail/checkPhone</a> 同济大学的校友邮箱需要两个信息： 1.学工号  2.身份证号 </p><p> <img src="https://i.loli.net/2020/08/23/Dgj2K7OYsc6UA8L.png" alt="img"> </p><p>第一步： 搜索学生名单，获取已经毕业了的学生学号  google： 同济大学 学生名单 ，或者直接去同济公开网查  <a href="http://xxgk.tongji.edu.cn/index.php?classid=3148&amp;page=5">http://xxgk.tongji.edu.cn/index.php?classid=3148&amp;page=5</a> </p><p>第二步： 去表格里找 生僻的名字 <img src="https://i.loli.net/2020/08/23/RY9xaQkBq6zeHt7.png" alt="img"> 第三步：上TG去 @sgk123bot 搜索生僻的名字， 多试几个 ，有免费条数，精髓在于只搜索不查看的话 不消耗条数</p><p>  <img src="https://i.loli.net/2020/08/23/SCpGQFNVdqXyack.png" alt="img"> </p><p>第四步： 找到只有一条记录的，如我找的这个  <img src="https://i.loli.net/2020/08/23/jZC3WFONt9sBTHk.png" alt="img"> </p><p>第五步： 回到校友邮箱，输入他的学工号，你的手机号 进行注册，让你验证身份证就输入他的，搞定。    </p><p>第六步： 拿到邮箱以后github上找 onemanager 这个项目，用heroku搭建列表程序(同济可以用API但不能创建API，onemanager自带同济API，是最简单的) </p><p> 第七步： 搭建完成后配置邮箱时会自动弹窗授权，点击确定后在下面这个图的地方什么都不选，点确认就OK了  <img src="https://i.loli.net/2020/08/21/duwWgDxq42VLXlU.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Gitkarken在6.50之后的破解使用Pro版本</title>
      <link href="2020/12/25/Gitkarken%E5%9C%A86.50%E4%B9%8B%E5%90%8E%E7%9A%84%E7%A0%B4%E8%A7%A3%E4%BD%BF%E7%94%A8Pro%E7%89%88%E6%9C%AC/"/>
      <url>2020/12/25/Gitkarken%E5%9C%A86.50%E4%B9%8B%E5%90%8E%E7%9A%84%E7%A0%B4%E8%A7%A3%E4%BD%BF%E7%94%A8Pro%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="Gitkarken在6-50之后的破解使用Pro版本"><a href="#Gitkarken在6-50之后的破解使用Pro版本" class="headerlink" title="Gitkarken在6.50之后的破解使用Pro版本"></a>Gitkarken在6.50之后的破解使用Pro版本</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>需要安装<code>node.js</code>和<code>yarn</code>，其中<code>node.js</code>安装时要选择加入系统环境中，<code>yarn</code>在安装后也要手动进行添加进系统环境。</p><h3 id="下载破解脚本并破解"><a href="#下载破解脚本并破解" class="headerlink" title="下载破解脚本并破解"></a>下载破解脚本并破解</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/<span class="number">5</span>cr1pt/GitCracken.git</span><br></pre></td></tr></table></figure><p>破解</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> GitCracken/GitCracken</span><br><span class="line">rm yarn.lock</span><br><span class="line">yarn install</span><br><span class="line">yarn build</span><br><span class="line"># 最后一个参数是此程序安装位置下的一个文件</span><br><span class="line">node dist/bin/gitcracken.js patcher --asar ~/AppData/Local/gitkraken/app-<span class="number">6</span>.<span class="number">5</span>.<span class="number">0</span>/resources/app.asar</span><br></pre></td></tr></table></figure><h3 id="破解中遇到的问题"><a href="#破解中遇到的问题" class="headerlink" title="破解中遇到的问题"></a>破解中遇到的问题</h3><ol><li><p>破解最后一步使用的文件参数，若是失败的话改为自己文件的绝对位置</p></li><li><p>安装<code>node.js</code>和<code>yarn</code>之后重启，使用<code>yarn --version</code>验证是否能够使用</p></li><li><p>成功破解之后，是在<code>app.asar</code>做的修改，若是你之前打开了程序并且登录了<code>Github</code>其中保留的有你的信息，所以若是更换账户需要重新破解一次</p></li><li><p>我在最后一步破解之后，打开一直卡在启动界面上，我把<code>app.asar</code>拷贝出来重新安装了一遍，然后替换文件<code>app.asar</code>重新打开，在右下角看到<code>Pro</code>提示，若是显示是<code>Free</code>直接点击应该会变换。</p><p><img src="https://raw.githubusercontent.com/HBaaa/saveImage/master/20200708163042.png" alt="image-20200708163041909"></p></li><li><p>在当前（2020.07.8）使用的7.0.1版本仍是可以破解的，但是为了之后保持能用最好不要更新。由于系统图标指向的是<code>Update.exe</code>程序，可在快捷方式中进行修改指向程序的真正位置。另外在<code>hosts</code>中加入<code>127.0.0.1 release.gitkraken.com</code>屏蔽更新。关于此程序的右键功能，在知乎有看大佬提到说需要修改注册表，我是直接将其关闭了</p></li></ol><h1 id="gitKraken-6-5-0-免收费破解"><a href="#gitKraken-6-5-0-免收费破解" class="headerlink" title="gitKraken 6.5.0 免收费破解"></a>gitKraken 6.5.0 免收费破解</h1><p><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c816e735f6251?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><blockquote><p>在家三十多天回到公司一看 <code>gitKraken</code> 要收费了，本着下次一定支持的精神肯定网上已经有人破解了</p></blockquote><h2 id="1-下载安装-6-5-1-之前的-gitKraken-包"><a href="#1-下载安装-6-5-1-之前的-gitKraken-包" class="headerlink" title="1. 下载安装 6.5.1 之前的 gitKraken 包"></a>1. 下载安装 6.5.1 之前的 gitKraken 包</h2><p><a href="https://release.axocdn.com/win64/GitKrakenSetup-6.5.0.exe">release.axocdn.com/win64/GitKr…</a></p><h2 id="2-屏蔽更新host"><a href="#2-屏蔽更新host" class="headerlink" title="2. 屏蔽更新host"></a>2. 屏蔽更新host</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># gitKraken 更新屏蔽</span><br><span class="line">127.0.0.1 release.gitkraken.com</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="3-打开gitkraken并登陆"><a href="#3-打开gitkraken并登陆" class="headerlink" title="3. 打开gitkraken并登陆"></a>3. 打开gitkraken并登陆</h2><h2 id="4-下载破解脚本"><a href="#4-下载破解脚本" class="headerlink" title="4. 下载破解脚本"></a>4. 下载破解脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;5cr1pt&#x2F;GitCracken.git</span><br><span class="line">cd GitCracken&#x2F;GitCracken</span><br><span class="line">rm yarn.lock</span><br><span class="line">yarn install</span><br><span class="line">yarn build</span><br><span class="line"># windows gitbash</span><br><span class="line">node dist&#x2F;bin&#x2F;gitcracken.js patcher --asar ~&#x2F;AppData&#x2F;Local&#x2F;gitkraken&#x2F;app-6.5.0&#x2F;resources&#x2F;app.asar</span><br><span class="line"># mac </span><br><span class="line">node dist&#x2F;bin&#x2F;gitcracken.js patcher --asar 你的gitkraken的目录&#x2F;resources&#x2F;app.asar</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="5-重启gitkraken则能看见右下角的Pro"><a href="#5-重启gitkraken则能看见右下角的Pro" class="headerlink" title="5. 重启gitkraken则能看见右下角的Pro"></a>5. 重启gitkraken则能看见右下角的Pro</h2><p>切换账号则重新执行node命令</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/11/170c80eee33fc9c1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p><a href="https://juejin.cn/post/6844904087004135432">https://juejin.cn/post/6844904087004135432</a></p><p><a href="https://hbaaa.github.io/2020/07/08/Gitkarken%E7%A0%B4%E8%A7%A3/">https://hbaaa.github.io/2020/07/08/Gitkarken%E7%A0%B4%E8%A7%A3/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇Hexo blog文章</title>
      <link href="2020/12/24/%E7%AC%AC%E4%B8%80%E7%AF%87Hexo-blog%E6%96%87%E7%AB%A0/"/>
      <url>2020/12/24/%E7%AC%AC%E4%B8%80%E7%AF%87Hexo-blog%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200802200250982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h2 id="Hexo-Gitee-部署自己的个人博客"><a href="#Hexo-Gitee-部署自己的个人博客" class="headerlink" title="Hexo + Gitee 部署自己的个人博客"></a>Hexo + Gitee 部署自己的个人博客</h2><p>  目前市场上比较火的一些博客框架： <strong>Hexo、jekyll、Solo、Halo 、gohugo、VuePress、wordpress</strong> 等等 ，这些都是开源的静态博客框架（没有登录注册，后台管理等等）好处就是能够非常快速的搭建好自己的个人博客（也是要一定前端知识的），也是因为我之前的blog网站实在没票子继续维护服务器了~~</p><p>  我这里就使用 Hexo 框架搭建了，因为 Hexo 要求的环境我电脑都装有，网上关于Hexo的生态也比较丰富完善。可以看 <strong>B站羊哥（CodeSheep）</strong> 的视频就有介绍，我没有写详细的地方，百度一下资料也多得不得了</p><p>  先看下我爆肝3天的结果吧（一天根据官方文档查资料搭建好，两天魔改页面和解决图床问题）：地址：<a href="http://lingstudy.gitee.io/">http://lingstudy.gitee.io/</a></p><iframe id="pqvE7xEK-1596373719908" src="https://player.bilibili.com/player.html?aid=669047626" allowfullscreen="true" data-mediaembed="bilibili" style="box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: normal; overflow-wrap: break-word; display: block; width: 660px; height: 330px;"></iframe><p>Hexo+gitee：30分钟搭建一个自己的个人博客网站 欢迎友链呀＜(▰˘◡˘▰)</p><hr><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>  项目最终是部署到码云上，不需要自己再购买服务器，这里也可以部署到 <strong>github</strong>， 但是我们大天国有一堵墙， 用 <strong>github</strong> 那速度着实让人着急！</p><p><strong>1、安装 Node.js 环境：</strong> 因为 Hexo 是基于Node.js 的博客框架，就像 Java 要依赖 JDK 环境一样。</p><ul><li>node下载地址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a> ，傻瓜式安装，这里不再详述</li></ul><p><strong>NodeJS环境安装重点拓展：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确认node.js安装成功：运行下面两个命令打印版本号即可</span></span><br><span class="line">node -v</span><br><span class="line">npm  -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Node.js 淘宝镜像加速器 （cnpm）</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 node 类库默认安装位置</span></span><br><span class="line"><span class="comment"># 默认是在 C:\Users\lingStudy\AppData\Roaming\npm</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\nodejs安装路径\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\nodejs安装路径\node_cache&quot;</span></span><br><span class="line"><span class="comment"># 查看修改是否成功</span></span><br><span class="line">npm root -g</span><br><span class="line"><span class="comment"># 然后把D:\install\node\node_global配置到环境变量的 PATH 下即可</span></span><br><span class="line">123456789101112131415</span><br></pre></td></tr></table></figure><p><strong>2、安装版本控制工具 Git ：</strong> 用来将本地项目托管到码云，所以还需要自己注册一个码云的账号</p><p>下载地址：<a href="https://git-scm.com/download">https://git-scm.com/download</a> 学程序的，在工作中 Git 是必知必会的，还没学的建议去看看，所以这里不再详细介绍 Git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Git一些重要配置</span></span><br><span class="line">git config --global user.name <span class="string">&quot;lxxxxdy&quot;</span>  <span class="comment">#码云用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx83@qq.com&quot;</span>   <span class="comment">#邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成SSH公钥并添加到码云，实现免密码登录</span></span><br><span class="line"><span class="comment"># 1、生成公钥</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment"># 2、进入 C:\Users\主机名\.ssh 目录，把 id_rsa.pub 里面的信息复制到码云的 SSH公钥 中即可</span></span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p><strong>Hexo 官网：</strong> <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a><br><img src="https://img-blog.csdnimg.cn/20200802200636724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># 查看hexo版本</span></span><br><span class="line">hexo -v</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200802200739294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="创建本地博客站点"><a href="#创建本地博客站点" class="headerlink" title="创建本地博客站点"></a>创建本地博客站点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化一个项目，hexoblog 是项目名</span></span><br><span class="line">hexo init  hexoblog</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200802200820716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、进入hexoblog项目目录</span></span><br><span class="line"><span class="built_in">cd</span> hexoblog</span><br><span class="line"><span class="comment">#/2、安装 hexoblog 项目的依赖包</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">#/3、启动 hexoblog 项目服务</span></span><br><span class="line">hexo server</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200802200859628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时，访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可看到 hexo 默认的页面和一篇“Hello World”默认生成的文章<br><img src="https://img-blog.csdnimg.cn/20200802200937295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此，Hexo 项目搭建成功！</p><blockquote><p>项目主要文件目录介绍：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy       <span class="comment"># 需要部署的文件</span></span><br><span class="line">├── node_modules  <span class="comment"># 项目所有的依赖包和插件</span></span><br><span class="line">├── public        <span class="comment"># 生成的静态网页文件</span></span><br><span class="line">├── scaffolds     <span class="comment"># 文章模板</span></span><br><span class="line">├── <span class="built_in">source</span>        <span class="comment"># 博客正文和其他源文件等都应该放在这里</span></span><br><span class="line">|   ├── _drafts   <span class="comment"># 草稿</span></span><br><span class="line">|   └── _posts    <span class="comment"># 文章</span></span><br><span class="line">├── themes        <span class="comment"># 主题</span></span><br><span class="line">├── _config.yml   <span class="comment"># 全局配置文件</span></span><br><span class="line">└── package.json  <span class="comment"># 项目依赖信息</span></span><br><span class="line">1234567891011</span><br></pre></td></tr></table></figure><h2 id="新建一篇blog文章"><a href="#新建一篇blog文章" class="headerlink" title="新建一篇blog文章"></a>新建一篇blog文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一篇名为 第一篇Hexo blog文章 的文章</span></span><br><span class="line">hexo new <span class="string">&quot;第一篇Hexo blog文章&quot;</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200802201048569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  之后，就可以直接编辑刚刚新建的文章，再次启动服务查看效果，如下，这里有一个问题，Hexo框架文章中的图片只支持外链的形式，有很多方法解决，比如，可以在码云或者七牛云部署一个自己的图床。<br><img src="https://img-blog.csdnimg.cn/20200802201113758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="将项目部署到码云"><a href="#将项目部署到码云" class="headerlink" title="将项目部署到码云"></a>将项目部署到码云</h2><p>1、在码云新建一个仓库，注意标红的地方，这里我的码云用户名为 <strong>lingstudy</strong><br><img src="https://img-blog.csdnimg.cn/20200802201146107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2、在项目根目录下安装git部署插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之后就可以使用 hexo deploy（或简写 hexo d）将项目部署到gitee远程仓库</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200802201219532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3、修改项目配置文件：<strong>_config.yml</strong>，在最下面，修改如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 仓库URL地址</span><br><span class="line">  branch: master</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020080220131539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、使用命令 <strong>hexo d</strong> 将项目部署到 gitee 远程仓库，此时本地文件夹中出现有一个public文件夹。<br><img src="https://img-blog.csdnimg.cn/20200802201344312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5、开启 Gitee Pages 静态网页托管服务<br><img src="https://img-blog.csdnimg.cn/20200802201407831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后使用提供的网址即可访问博客，每次重新上传代码到gitee时，都需要点击下图的更新按钮<strong>重启page服务</strong><br><img src="https://img-blog.csdnimg.cn/202008022014338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>访问生成的网址 <a href="https://lingstudy.gitee.io/">https://lingstudy.gitee.io/</a> ，部署成功！<br><img src="https://img-blog.csdnimg.cn/20200802201510794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>官网主题：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>可以去官网找自己喜欢的主题，下载下来，我这里就随便拿一个来演示了</p><p>1、进入所下载主题根目录下的 theme 目录，将里面的文件复制到自己项目的 theme 目录下<br><img src="https://img-blog.csdnimg.cn/2020080220154554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2、修改根目录下的配置文件 <strong>_config.yml</strong><br><img src="https://img-blog.csdnimg.cn/20200802201608536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3、启动项目，访问：<a href="http://localhost:4000/">http://localhost:4000/</a> 先在本地查看主题是否修改成功<br><img src="https://img-blog.csdnimg.cn/20200802201649173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、将修改后的项目部署到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成静态网站文件</span></span><br><span class="line">hexo g  </span><br><span class="line"><span class="comment"># 上传到远程仓库</span></span><br><span class="line">hexo d  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、清除 hexo 的缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 2、采用一键部署</span></span><br><span class="line">hexo g --d</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200802201726963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5、访问 <a href="https://lingstudy.gitee.io/">https://lingstudy.gitee.io/</a> 主题样式修改并部署成功！</p><p><strong>（这里若出现样式错乱，可能是浏览器缓存问题，执行 Ctrl + F5 强制刷新一下即可）</strong><br><img src="https://img-blog.csdnimg.cn/20200802201812780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM2NTUzMA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此，Hexo + Gitee 部署自己的个人博客完成！</p><h2 id="拓展：快速编写文章"><a href="#拓展：快速编写文章" class="headerlink" title="拓展：快速编写文章"></a>拓展：快速编写文章</h2><p>新建文章时每次都要执行 <strong>hexo new “blogName”</strong> 命令很麻烦</p><p>可以直接到根目录 /source/_posts 目录下，创建一个.md 文件进行编写，在文件的顶部添加下面内容就可以了，主要写一个 title 就好了，其他都可以省略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章名称</span><br><span class="line">date: 2020-07-30 16:46:07(创建时间)</span><br><span class="line">tags: 标签名</span><br><span class="line">categories: 分类</span><br><span class="line">description: 描述</span><br><span class="line">comments: 是否开启评论(<span class="literal">true</span> or <span class="literal">false</span>)</span><br><span class="line">---</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p>之后，使用 <strong>hexo g –d</strong> 命令推送到 gitee上，并在 gitee 上更新一下 Gitee Pages 服务即可</p><hr><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>  为什么一定要有一个自己的个人博客？我一直认为坚持写优质的blog文章，是提升和巩固自身能力的重要方法之一！<br>  我的现在这个效果，是花了大量时间去修改和配置了的，其实搭这种blog对提升技术不会有太大帮助，因为用的是已经写好的框架(模板)，可我就是用不爽默认的样式虽然不是走前端的。<strong>最后，搭建好了欢迎到留言区互留友链~</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9OTmtUcUtvNmsxcHNaV0V4QVV4T2liUm42YzhJUThBNGNpYnkzZE5Pek1qaWM1MlhCeDZIeDk1QkxMT3JYWUZveUNaUEhQcWRnYjU0WGVhNlBvaWJ4Ym1vd0EvNjQw?x-oss-process=image/format,png#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
